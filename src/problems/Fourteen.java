package problems;

/**
 * Project Euler Problem 14 http://projecteuler.net/problem=14
 * 
 * The following iterative sequence is defined for the set of positive
 * longegers:
 * 
 * n -> n/2 (n is even)
 * 
 * n -> 3n + 1 (n is odd)
 * 
 * Using the rule above and starting with 13, we generate the following
 * sequence:
 * 
 * 13->40->20->10->5->16->8->4->2->1 It can be seen that this sequence (starting
 * at 13 and finishing at 1) contains 10 terms. Although it has not been proved
 * yet (Collatz Problem), it is thought that all starting numbers finish at 1.
 * 
 * Which starting number, under one million, produces the longest chain?
 * 
 * NOTE: Once the chain starts the terms are allowed to go above one million.
 * 
 * @author Leo Rausch
 * 
 */
public class Fourteen {

	/**
	 * Applies the Collatz rule to a value.
	 * 
	 * n -> n/2 (n is even)
	 * 
	 * n -> 3n + 1 (n is odd)
	 * 
	 * @param n
	 *            The number you would like to apply the Collatz rule to.
	 * @return The new number generated by the Collatz rule.
	 */
	public static long collatz(long n) {

		// If the number is even.
		if (n % 2 == 0) {
			return n / 2;
		} else {
			// The number is odd.
			return (3 * n) + 1;
		}
	}

	/**
	 * Finds the starting number with the longest Collatz sequence under a given
	 * max.
	 * 
	 * @param max
	 *            The largest starting number to be compared.
	 * @return The starting number that generated the longest Collatz sequence.
	 */
	public static long findLongestCollatz(long max) {

		long longestChain = 0;
		long longestNumber = 0;

		for (long i = 2; i < max; i++) {

			long count = 1;
			long n = i;
			while (n != 1) {

				n = collatz(n);
				count++;
			}
			if (count > longestChain) {
				longestNumber = i;
				longestChain = count;
			}
		}
		return longestNumber;
	}

	public static void main(String[] args) {

		long startTime = System.currentTimeMillis();

		long n = 1000000;
		System.out.println("The number with the longest chain under " + n
				+ " = " + findLongestCollatz(n));

		long endTime = System.currentTimeMillis();
		System.out.println("Time taken to complete = " + (endTime - startTime)
				+ "ms");
	}
}
