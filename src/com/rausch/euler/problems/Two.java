package com.rausch.euler.problems;

import com.rausch.euler.resources.Fibonacci;

/**
 * Project Euler Problem 2 http://projecteuler.net/problem=2
 * 
 * Each new term in the Fibonacci sequence is generated by adding the previous
 * two terms. By starting with 1 and 2, the first 10 terms will be:
 * 
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * 
 * By considering the terms in the Fibonacci sequence whose values do not exceed
 * four million, find the sum of the even-valued terms.
 * 
 * @author Leo Rausch
 * 
 */
public class Two {

	/**
	 * Adds all of the even fibonacci numbers below a certain limit.
	 * 
	 * @param limit
	 *            The limit of how large the fibonacci numbers can get.
	 * @return The sum of the even-valued fibonacci numbers below the limit.
	 */
	public static int fibAdd(int limit) {

		boolean running = true;
		int sum = 0;
		int counter = 0;

		Fibonacci fib = new Fibonacci();
		/**
		 * This needs to run until we find a fibonacci number that exceeds the
		 * limit.
		 */
		while (running) {

			int number = fib.fibonacci(counter);

			/**
			 * Make sure the calculated fibonacci number does not exceed the
			 * limit, if the number exceeds the limit then stop running the
			 * program
			 */
			if (number < limit) {
				/*
				 * Check if the calculated fibonacci number is even and add it
				 * to the sum
				 */
				if (number % 2 == 0) {
					sum += number;
				}
			} else {
				running = false;
			}
			counter++;
		}
		return sum;
	}

	public static void main(String args[]) {

		long startTime = System.currentTimeMillis();

		int limit = 4000000;
		System.out.println("The sum of the even-valued fobonacci values below "
				+ limit + " are " + fibAdd(limit));

		long endTime = System.currentTimeMillis();
		System.out.println("Time taken to complete = " + (endTime - startTime)
				+ "ms");
	}
}
